//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// Tue Mar 1 2022 09:52:41
//
//      Input file      : 
//      Component name  : cv_ctrl
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//
// FPGA Colecovision
//
// $Id: cv_ctrl.vhd,v 1.3 2006/01/08 23:58:04 arnim Exp $
//
// Controller Interface Module
//
//-----------------------------------------------------------------------------
//
// Copyright (c) 2006, Arnim Laeuger (arnim.laeuger@gmx.net)
//
// All rights reserved
//
// Redistribution and use in source and synthezised forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
//
// Redistributions in synthesized form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// Neither the name of the author nor the names of other contributors may
// be used to endorse or promote products derived from this software without
// specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// Please report bugs to the author, but before you do so, please
// make sure that this is not a derivative work and that
// you have the latest version of this file.
//
//-----------------------------------------------------------------------------

module cv_ctrl(
    clk_i,
    clk_en_3m58_i,
    reset_n_i,
    ctrl_en_key_n_i,
    ctrl_en_joy_n_i,
    a1_i,
    ctrl_p1_i,
    ctrl_p2_i,
    ctrl_p3_i,
    ctrl_p4_i,
    ctrl_p5_o,
    ctrl_p6_i,
    ctrl_p7_i,
    ctrl_p8_o,
    ctrl_p9_i,
    d_o
);
    
    input            clk_i;
    input            clk_en_3m58_i;
    input            reset_n_i;
    input            ctrl_en_key_n_i;
    input            ctrl_en_joy_n_i;
    input            a1_i;
    input [2:1]      ctrl_p1_i;
    input [2:1]      ctrl_p2_i;
    input [2:1]      ctrl_p3_i;
    input [2:1]      ctrl_p4_i;
    output [2:1]     ctrl_p5_o;
    input [2:1]      ctrl_p6_i;
    input [2:1]      ctrl_p7_i;
    output [2:1]     ctrl_p8_o;
    input [2:1]      ctrl_p9_i;
    output reg [7:0] d_o;
    
    
    reg              sel_q;
    
    //---------------------------------------------------------------------------
    // Process seq
    //
    // Purpose:
    //   Implements the R/S flip-flop which selects the controller function.
    //
    
    always @(posedge clk_i or negedge reset_n_i)
    begin: seq
        reg [1:0]        ctrl_en_v;
        if (reset_n_i == 1'b0)
            sel_q <= 1'b0;
        
        else 
        begin
            if (clk_en_3m58_i == 1'b1)
            begin
                ctrl_en_v = {ctrl_en_key_n_i, ctrl_en_joy_n_i};
                case (ctrl_en_v)
                    2'b01 :
                        sel_q <= 1'b0;
                    2'b10 :
                        sel_q <= 1'b1;
                    default :
                        ;
                endcase
            end
        end
    end
    //
    //---------------------------------------------------------------------------
    
    //---------------------------------------------------------------------------
    // Controller select
    //---------------------------------------------------------------------------
    assign ctrl_p5_o[1] = sel_q;
    assign ctrl_p5_o[2] = sel_q;
    assign ctrl_p8_o[1] = (~sel_q);
    assign ctrl_p8_o[2] = (~sel_q);
    
    //---------------------------------------------------------------------------
    // Process ctrl_read
    //
    // Purpose:
    //   Read multiplexer for the controller lines.
    //   NOTE: The quadrature decoders are not implemented!
    //
    
    always @(a1_i or ctrl_p1_i or ctrl_p2_i or ctrl_p3_i or ctrl_p4_i or ctrl_p6_i or ctrl_p7_i)
    begin: ctrl_read
        reg [1:0]        idx_v;
        if (a1_i == 1'b0)
            // read controller #1
            idx_v = 1;
        else
            // read controller #2
            idx_v = 2;
        
        // quadrature information
        d_o <= {1'b0, ctrl_p6_i[idx_v], ctrl_p7_i[idx_v], 1'b1, ctrl_p3_i[idx_v], ctrl_p2_i[idx_v], ctrl_p4_i[idx_v], ctrl_p1_i[idx_v]};		// quadrature information
    end
    
endmodule
